#include <typeinfo>

#include <iostream>
#include <vector>

class Class1
{
public:
    Class1(int value) : m_value(value) {}
    virtual ~Class1() {}
    virtual void print() = 0;
protected:
    int m_value;
};

class Class2 : public Class1
{
public:
    Class2(int value, char symbol) : Class1(value), m_symbol(symbol) {}
    virtual void print()
    {
        std::cout << "Class2: " << m_value << ", " << m_symbol << std::endl;
    }
private:
    char m_symbol;
};

void my_copy(std::vector<Class1*>& base, Class1* obj)
{
    base.push_back(obj);
}

int main()
{
    std::vector<Class1*> base;

    Class1* obj1 = new Class2(10, 'a');
    Class1* obj2 = new Class2(20, 'b');
    Class1* obj3 = new Class2(30, 'c');

    my_copy(base, obj1);
    my_copy(base, obj2);
    my_copy(base, obj3);

    delete obj1;
    delete obj2;
    delete obj3;

    for (auto obj : base)
    {
        obj->print();
        delete obj;
    }
    base.clear();

    std::cout << typeid(Class2).name() << std::endl; //вывод типа

    return 0;
}
